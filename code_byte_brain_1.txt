"use client";

import {useState} from 'react';
import {analyzeMisinformation} from '@/ai/flows/analyze-misinformation';
import {findAlternativeSources} from '@/ai/flows/find-alternative-sources';
import {Card, CardContent, CardDescription, CardHeader, CardTitle} from "@/components/ui/card";
import {Textarea} from "@/components/ui/textarea";
import {Button} from "@/components/ui/button";

export const MisinformationAnalyzer = () => {
  const [text, setText] = useState('');
  const [analysisResult, setAnalysisResult] = useState(null);
  const [sources, setSources] = useState([]);
  const [loading, setLoading] = useState(false);

  const handleAnalyze = async () => {
    setLoading(true);
    try {
      const analysis = await analyzeMisinformation({textContent: text});
      setAnalysisResult(analysis);

      if (analysis.isMisinformation) {
        const sourcesResult = await findAlternativeSources({misinformationText: text});
        setSources(sourcesResult.alternativeSources);
      } else {
        setSources([]);
      }
    } catch (error) {
      console.error("Error analyzing misinformation:", error);
      alert("Could not analyze the text. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const handleDownloadReport = () => {
    if (analysisResult) {
      const reportContent = `
        Analysis Result:
        Is Misinformation: ${analysisResult.isMisinformation ? 'Yes' : 'No'}
        Reason: ${analysisResult.reason}

        ${analysisResult.isMisinformation && sources.length > 0
          ? `
            Alternative Sources:
            ${sources.map((source, index) => `${index + 1}. ${source}`).join('\n')}
          `
          : 'No alternative sources found.'
        }
      `;

      const blob = new Blob([reportContent], {type: 'text/plain'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'misinformation_analysis_report.txt';
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } else {
      alert('No analysis result to download.');
    }
  };

  return (
    <div className="container mx-auto mt-8">
      <Card className="w-full max-w-3xl mx-auto">
        <CardHeader>
          <CardTitle>Misinformation Analyzer</CardTitle>
          <CardDescription>Enter text to analyze for potential misinformation.</CardDescription>
        </CardHeader>
        <CardContent className="grid gap-4">
          <div className="grid gap-2">
            <Textarea
              value={text}
              onChange={(e) => setText(e.target.value)}
              placeholder="Enter text here..."
              className="w-full"
            />
          </div>
          <Button onClick={handleAnalyze} disabled={loading}>
            {loading ? "Analyzing..." : "Analyze"}
          </Button>

          {analysisResult && (
            <div className="mt-4">
              <h3 className="text-lg font-semibold">Analysis Result:</h3>
              <p>
                <strong>Is Misinformation:</strong> {analysisResult.isMisinformation ? 'Yes' : 'No'}
              </p>
              <p>
                <strong>Reason:</strong> {analysisResult.reason}
              </p>

              {analysisResult.isMisinformation && sources.length > 0 && (
                <div className="mt-4">
                  <h3 className="text-lg font-semibold">Alternative Sources:</h3>
                  <ul>
                    {sources.map((source, index) => (
                      <li key={index} className="mb-2">
                        <a href={source} target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline">
                          {source}
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              )}

              {analysisResult.isMisinformation && sources.length === 0 && (
                <p>No alternative sources found.</p>
              )}
               <Button onClick={handleDownloadReport} variant="secondary">
                 Download Report
              </Button>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};


############

'use server';
/**
 * @fileOverview An AI agent that finds reliable alternative sources for misinformation.
 *
 * - findAlternativeSources - A function that finds alternative sources.
 * - FindAlternativeSourcesInput - The input type for the findAlternativeSources function.
 * - FindAlternativeSourcesOutput - The return type for the findAlternativeSources function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const FindAlternativeSourcesInputSchema = z.object({
  misinformationText: z.string().describe('The text of the misinformation to find alternative sources for.'),
});
export type FindAlternativeSourcesInput = z.infer<typeof FindAlternativeSourcesInputSchema>;

const FindAlternativeSourcesOutputSchema = z.object({
  alternativeSources: z.array(z.string()).describe('An array of reliable alternative sources that contradict or clarify the misinformation.'),
});
export type FindAlternativeSourcesOutput = z.infer<typeof FindAlternativeSourcesOutputSchema>;

export async function findAlternativeSources(input: FindAlternativeSourcesInput): Promise<FindAlternativeSourcesOutput> {
  return findAlternativeSourcesFlow(input);
}

const prompt = ai.definePrompt({
  name: 'findAlternativeSourcesPrompt',
  input: {
    schema: z.object({
      misinformationText: z.string().describe('The text of the misinformation to find alternative sources for.'),
    }),
  },
  output: {
    schema: z.object({
      alternativeSources: z.array(z.string()).describe('An array of reliable alternative sources that contradict or clarify the misinformation.'),
    }),
  },
  prompt: `You are an AI assistant that specializes in finding reliable alternative sources of information that contradict or clarify misinformation. You **MUST ONLY** use sources from the **World Health Organization (WHO)**.

  Please find reliable, alternative sources of information that contradict or clarify the following misinformation:
  {{misinformationText}}

  Please provide an array of URLs to these sources.`, 
});

const findAlternativeSourcesFlow = ai.defineFlow<
  typeof FindAlternativeSourcesInputSchema,
  typeof FindAlternativeSourcesOutputSchema
>({
  name: 'findAlternativeSourcesFlow',
  inputSchema: FindAlternativeSourcesInputSchema,
  outputSchema: FindAlternativeSourcesOutputSchema,
},
async input => {
  const {output} = await prompt(input);
  return output!;
});
